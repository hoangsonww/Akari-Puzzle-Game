package org.example.akarigamejavafx;

/** This class contains sample Akari puzzles for testing purposes */
public class SamplePuzzles {
  // The following mapping between cells and integers is used for the puzzles in this file
  //   0 <--> Clue cell with value "0"
  //   1 <--> Clue cell with value "1"
  //   2 <--> Clue cell with value "2"
  //   3 <--> Clue cell with value "3"
  //   4 <--> Clue cell with value "4"
  //   5 <--> Wall with no clue
  //   6 <--> Empty corridor

  /** Default constructor */
  public SamplePuzzles() {}

  /**
   * "Easy" 7x7 Puzzle ID 930887 from <a
   * href="https://www.puzzle-light-up.com/specific.php">https://www.puzzle-light-up.com/specific.php</a>
   */
  public static int[][] PUZZLE_01 = {
    {6, 6, 6, 6, 1, 6, 6},
    {6, 6, 6, 5, 6, 6, 6},
    {0, 6, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 4, 6},
    {6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 2, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6},
  };

  /**
   * The puzzle shown on the wikipedia page for Akari. See: <a
   * href="https://en.wikipedia.org/wiki/Light_Up_(puzzle)">https://en.wikipedia.org/wiki/Light_Up_(puzzle)</a>
   */
  public static int[][] PUZZLE_02 = {
    {5, 6, 6, 5, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 6, 6, 6, 6, 5, 6, 6},
    {6, 3, 6, 6, 6, 6, 0, 6, 6, 6},
    {6, 6, 2, 6, 6, 5, 6, 6, 6, 1},
    {6, 6, 6, 1, 0, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 1, 5, 5, 6, 6, 6},
    {5, 6, 6, 6, 2, 6, 6, 2, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 5, 6},
    {6, 6, 1, 6, 6, 6, 6, 6, 6, 6},
    {0, 6, 6, 6, 6, 6, 1, 6, 6, 0},
  };

  /**
   * "Easy" 7x7 Puzzle ID 9070893 from <a
   * href="https://www.puzzle-light-up.com/specific.php">https://www.puzzle-light-up.com/specific.php</a>
   */
  public static int[][] PUZZLE_03 = {
    {6, 6, 5, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 4, 6},
    {6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 6, 6, 6, 6},
    {3, 6, 6, 6, 6, 6, 6},
    {6, 2, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 0, 6, 6},
  };

  /**
   * "Normal" 10x10 Puzzle ID 6424638 from <a
   * href="https://www.puzzle-light-up.com/specific.php">https://www.puzzle-light-up.com/specific.php</a>
   */
  public static int[][] PUZZLE_04 = {
    {6, 1, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 5},
    {6, 6, 5, 5, 6, 6, 6, 2, 6, 6},
    {2, 6, 6, 5, 6, 6, 1, 5, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 2, 6, 6, 0, 6, 6, 1},
    {6, 6, 2, 6, 6, 6, 5, 1, 6, 6},
    {2, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 5, 6},
  };

  /** Non-square puzzle example */
  public static int[][] PUZZLE_05 = {
    {6, 6, 5, 6, 6, 6},
    {6, 5, 6, 6, 6, 3},
    {6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6},
    {3, 6, 6, 6, 6, 6},
    {6, 2, 6, 6, 6, 6},
    {6, 6, 6, 6, 0, 6},
  };

  /** "Easy" 8x8 Puzzle - Balanced placement of walls and clues */
  public static int[][] PUZZLE_06 = {
    {6, 5, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 2, 6, 6, 6, 5},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 5, 6, 6},
    {6, 0, 6, 6, 6, 6, 1, 6},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6},
  };

  /** "Normal" 9x9 Puzzle - Asymmetric layout */
  public static int[][] PUZZLE_07 = {
    {6, 6, 6, 5, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 2, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6, 6},
    {6, 3, 6, 6, 6, 6, 6, 6, 2},
    {6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6},
  };

  /** "Hard" 10x10 Puzzle - High clue density */
  public static int[][] PUZZLE_08 = {
    {5, 6, 3, 6, 6, 5, 6, 6, 6, 1},
    {6, 6, 6, 5, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 2, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 1, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 0},
    {6, 6, 6, 6, 6, 6, 6, 6, 5, 6},
  };

  /** "Very Hard" 12x12 Puzzle - Sparse but challenging */
  public static int[][] PUZZLE_09 = {
    {6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
  };

  /** "Creative" 5x10 Puzzle - Non-square with interesting layout */
  public static int[][] PUZZLE_10 = {
    {6, 6, 5, 6, 6, 6, 6, 6, 5, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
  };

  /** Small 5x5 Puzzle - Simple beginner layout */
  public static int[][] PUZZLE_21 = {
    {6, 5, 6, 6, 6},
    {6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6},
    {6, 6, 6, 6, 5},
  };

  /** Medium 8x8 Puzzle - Balanced clues and walls */
  public static int[][] PUZZLE_22 = {
    {6, 6, 6, 6, 5, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 5, 6},
    {6, 6, 6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 6, 6, 5, 6, 6},
    {6, 5, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6},
  };

  /** Tricky 6x6 Puzzle - Focused challenge */
  public static int[][] PUZZLE_23 = {
    {5, 6, 6, 6, 6, 5},
    {6, 6, 6, 5, 6, 6},
    {6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6},
    {6, 6, 5, 6, 6, 6},
    {5, 6, 6, 6, 6, 5},
  };

  /** Challenging 9x9 Puzzle - Dense clues */
  public static int[][] PUZZLE_24 = {
    {6, 6, 5, 6, 6, 5, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5},
    {5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 5, 6, 6, 5},
  };

  /** Large 10x10 Puzzle - Sparse and open */
  public static int[][] PUZZLE_25 = {
    {6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 5, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
  };

  /** Small 6x6 Puzzle - Beginner-friendly */
  public static int[][] PUZZLE_11 = {
    {6, 6, 6, 5, 6, 6},
    {6, 5, 6, 6, 6, 3},
    {6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6},
    {6, 0, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 5},
  };

  /** Challenging 8x8 Puzzle - Intermediate difficulty */
  public static int[][] PUZZLE_12 = {
    {6, 6, 5, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6},
  };

  /** Compact 5x5 Puzzle - Simple but tricky */
  public static int[][] PUZZLE_13 = {
    {6, 6, 6, 6, 5},
    {6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6},
    {6, 6, 5, 6, 6},
  };

  /** Advanced 9x9 Puzzle - Asymmetric walls */
  public static int[][] PUZZLE_14 = {
    {5, 6, 6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5},
  };

  /** Large 12x12 Puzzle - Moderate difficulty */
  public static int[][] PUZZLE_15 = {
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5},
  };

  /** Small 4x4 Puzzle - Compact challenge */
  public static int[][] PUZZLE_16 = {
    {6, 5, 6, 6},
    {6, 6, 6, 5},
    {6, 6, 6, 6},
    {5, 6, 6, 6},
  };

  /** Tricky 7x7 Puzzle - Non-uniform clues */
  public static int[][] PUZZLE_17 = {
    {6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 5, 6},
    {6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 5, 6, 6},
    {6, 6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5},
  };

  /** Large 11x11 Puzzle - Dense wall distribution */
  public static int[][] PUZZLE_18 = {
    {6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5},
  };

  /** Creative 6x10 Puzzle - Unique design */
  public static int[][] PUZZLE_19 = {
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 5, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 5, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
  };

  /** Huge 12x12 Puzzle - High complexity */
  public static int[][] PUZZLE_20 = {
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6},
    {6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6},
    {6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5},
    {6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
    {6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6},
  };
}
